// rounded corners
@mixin border-radius($arc) {
	-webkit-border-radius: $arc;
	-moz-border-radius: $arc;
	-ms-border-radius: $arc;
	-o-border-radius: $arc;
	border-radius: $arc;
}

// remove rounded corners
@mixin border-radius-none() {
	-webkit-border-radius: 0;
	-moz-border-radius: 0;
	-ms-border-radius: 0;
	-o-border-radius: 0;
	border-radius: 0;
}

// drop shadow
@mixin box-shadow( $horiz:0, $vert:0, $blur:5px, $spread:0, $color: $color-dark-bkgd) {
	-webkit-box-shadow: $horiz $vert $blur $spread $color;
	-moz-box-shadow: $horiz $vert $blur $spread $color;
	box-shadow: $horiz $vert $blur $spread $color;
}

// drop inner shadow
@mixin box-shadow-inner( $horiz:0, $vert:0, $blur:5px, $spread:0, $color: $color-dark-bkgd ) {
	-webkit-box-shadow: inset $horiz $vert $blur $spread $color;
	-moz-box-shadow: inset $horiz $vert $blur $spread $color;
	box-shadow: inset $horiz $vert $blur $spread $color;
}

// remove shadow
@mixin box-shadow-none() {
	-webkit-box-shadow: none;
	-moz-box-shadow: none;
	box-shadow: none;
}

@mixin bkgd-transparent($color, $alpha) {
	$rgba: rgba($color, $alpha);
	$ie-hex-str: ie-hex-str($rgba);
	background-color: transparent;
	background-color: $rgba;
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
	zoom: 1;
}

// svg sprite
@mixin svg-background-image($sprite, $fallback-sprite, $options: 0 0 ) {
	background: url($fallback-sprite); 
	background: url($fallback-sprite) $options;
	background: -moz-linear-gradient(transparent,transparent),url($sprite) $options;
	background: -webkit-linear-gradient(transparent,transparent),url($sprite) $options;
	background: linear-gradient(transparent,transparent),url($sprite) $options;
}

// generic elements margin top
@mixin generic-margin-top($margin-top: 20, $important: '') {
	margin-top: $margin-top + px + ' ' + $important;
	margin-top: ($margin-top * 0.1) + rem + ' ' + $important;
}

// font-size rem hack
@mixin font-size($sizeValue: 1.6) {
  font-size: $sizeValue + px;
  font-size: ($sizeValue * 0.1) + rem;
}

// line-height rem hack
@mixin line-height($sizeValue: 1.6) {
  line-height: $sizeValue + px;
  line-height: ($sizeValue * 0.1) + rem;
}

// height rem hack
@mixin height($sizeValue: 1.6, $important:'') {
  height: $sizeValue + px + ' ' + $important;
  height: ($sizeValue * 0.1) + rem + ' ' + $important;
}

// max-height rem hack
@mixin max-height($sizeValue: 1.6) {
  max-height: $sizeValue + px;
  max-height: ($sizeValue * 0.1) + rem;
}

// min-height rem hack
@mixin min-height($sizeValue: 1.6) {
  min-height: $sizeValue + px;
  min-height: ($sizeValue * 0.1) + rem;
}

// Flip vertical
@mixin flip-vert() {
	-moz-transform: scaleY(-1);
	-o-transform: scaleY(-1);
	-webkit-transform: scaleY(-1);
	transform: scaleY(-1);
}

// Flip horizontal
@mixin flip-hori() {
	-moz-transform: scaleX(-1);
	-o-transform: scaleX(-1);
	-webkit-transform: scaleX(-1);
	transform: scaleX(-1);
}

// Arrows
@mixin arrow-top($color: #000000, $pointA: 20px, $pointB: 20px, $pointC: 20px) {
	border-left: $pointA solid transparent;
	border-right: $pointB solid transparent;
	border-bottom: $pointC solid $color;
	height: 0;
	width: 0;
}

@mixin arrow-right($color: #000000, $pointA: 20px, $pointB: 20px, $pointC: 20px) {
	border-top: $pointA solid transparent;
	border-bottom: $pointB solid transparent;
	border-left: $pointC solid $color;
	height: 0;
	width: 0;
}

@mixin arrow-bottom($color: #000000, $pointA: 20px, $pointB: 20px, $pointC: 20px) {
	border-left: $pointA solid transparent;
	border-right: $pointB solid transparent;
	border-top: $pointC solid $color;
	height: 0;
	width: 0;
}

@mixin arrow-left($color: #000000, $pointA: 20px, $pointB: 20px, $pointC: 20px) {
	border-top: $pointA solid transparent;
	border-bottom: $pointB solid transparent;
	border-right: $pointC solid $color;
	height: 0;
	width: 0;
}

// opacity
@mixin opacity($opacity) {
	filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=($opacity * 10));
	opacity: $opacity;
}


